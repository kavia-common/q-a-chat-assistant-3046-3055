{"is_source_file": true, "format": "TypeScript", "description": "This file defines the ApiService class in Angular, which provides methods for interacting with backend APIs related to questions and answers, as well as an LLM query endpoint. It handles HTTP requests and appends error handling logic.", "external_files": ["@angular/core", "@angular/common/http", "rxjs", "rxjs/operators", "../models/qa.models"], "external_methods": ["HttpClient.get", "HttpClient.post", "HttpParams.set", "pipe", "catchError", "map", "throwError"], "published": ["ApiService"], "classes": [{"name": "ApiService", "description": "Main service class for backend interactions, including question/answer management and LLM querying."}], "methods": [{"name": "getQuestions(query = ''): Observable<Question[]> { getQuestions", "description": "Fetches a list of questions from the backend, optionally filtered by a query string.", "scope": "ApiService", "scopeKind": "class"}, {"name": "addQuestion(payload: { title: string; body: string; tags: string[] }): Observable<Question> { addQuestion", "description": "Creates a new question on the backend with provided title, body, and tags.", "scope": "ApiService", "scopeKind": "class"}, {"name": "getAnswers(questionId: string): Observable<Answer[]> { getAnswers", "description": "Retrieves answers for a specific question identified by questionId.", "scope": "ApiService", "scopeKind": "class"}, {"name": "addAnswer(questionId: string, payload: { body: string }): Observable<Answer> { addAnswer", "description": "Adds an answer to a specific question.", "scope": "ApiService", "scopeKind": "class"}, {"name": "askLLM(payload: { prompt: string; context?: any }): Observable<{ answer: string }> { askLLM", "description": "Sends a prompt to the backend to query the LLM and returns its answer.", "scope": "ApiService", "scopeKind": "class"}, {"name": "private handleHttpError(err: HttpErrorResponse, friendlyMessage: string) { handleHttpError", "description": "Handles HTTP errors, logs details, and returns an observable error with a user-friendly message.", "scope": "ApiService", "scopeKind": "class"}, {"name": "constructor(private http: HttpClient) {} constructor", "scope": "ApiService", "scopeKind": "class", "description": "unavailable"}], "calls": ["HttpClient.get", "HttpClient.post", "catchError", "map", "throwError"], "search-terms": ["ApiService", "backend HTTP calls", "question management", "answer management", "LLM query", "Angular service", "HTTP error handling", "POST /api/questions", "GET /api/questions", "POST /api/questions/:id/answers", "GET /api/questions/:id/answers", "POST /api/ask"], "state": 2, "file_id": 22, "knowledge_revision": 102, "git_revision": "0f7196c67950b1dbce81b35bc480f5a18ba9bec1", "revision_history": [{"49": ""}, {"102": "0f7196c67950b1dbce81b35bc480f5a18ba9bec1"}], "ctags": [{"_type": "tag", "name": "ApiService", "path": "/home/kavia/workspace/code-generation/q-a-chat-assistant-3046-3055/frontend_app/src/app/services/api.service.ts", "pattern": "/^export class ApiService {$/", "language": "TypeScript", "kind": "class"}, {"_type": "tag", "name": "addAnswer", "path": "/home/kavia/workspace/code-generation/q-a-chat-assistant-3046-3055/frontend_app/src/app/services/api.service.ts", "pattern": "/^  addAnswer(questionId: string, payload: { body: string }): Observable<Answer> {$/", "language": "TypeScript", "kind": "method", "scope": "ApiService", "scopeKind": "class"}, {"_type": "tag", "name": "addQuestion", "path": "/home/kavia/workspace/code-generation/q-a-chat-assistant-3046-3055/frontend_app/src/app/services/api.service.ts", "pattern": "/^  addQuestion(payload: { title: string; body: string; tags: string[] }): Observable<Question> {$/", "language": "TypeScript", "kind": "method", "scope": "ApiService", "scopeKind": "class"}, {"_type": "tag", "name": "askLLM", "path": "/home/kavia/workspace/code-generation/q-a-chat-assistant-3046-3055/frontend_app/src/app/services/api.service.ts", "pattern": "/^  askLLM(payload: { prompt: string; context?: any }): Observable<{ answer: string }> {$/", "language": "TypeScript", "kind": "method", "scope": "ApiService", "scopeKind": "class"}, {"_type": "tag", "name": "base", "path": "/home/kavia/workspace/code-generation/q-a-chat-assistant-3046-3055/frontend_app/src/app/services/api.service.ts", "pattern": "/^  private readonly base = '\\/api';$/", "language": "TypeScript", "kind": "property", "scope": "ApiService", "scopeKind": "class"}, {"_type": "tag", "name": "constructor", "path": "/home/kavia/workspace/code-generation/q-a-chat-assistant-3046-3055/frontend_app/src/app/services/api.service.ts", "pattern": "/^  constructor(private http: HttpClient) {}$/", "language": "TypeScript", "kind": "method", "scope": "ApiService", "scopeKind": "class"}, {"_type": "tag", "name": "getAnswers", "path": "/home/kavia/workspace/code-generation/q-a-chat-assistant-3046-3055/frontend_app/src/app/services/api.service.ts", "pattern": "/^  getAnswers(questionId: string): Observable<Answer[]> {$/", "language": "TypeScript", "kind": "method", "scope": "ApiService", "scopeKind": "class"}, {"_type": "tag", "name": "getQuestions", "path": "/home/kavia/workspace/code-generation/q-a-chat-assistant-3046-3055/frontend_app/src/app/services/api.service.ts", "pattern": "/^  getQuestions(query = ''): Observable<Question[]> {$/", "language": "TypeScript", "kind": "method", "scope": "ApiService", "scopeKind": "class"}, {"_type": "tag", "name": "handleHttpError", "path": "/home/kavia/workspace/code-generation/q-a-chat-assistant-3046-3055/frontend_app/src/app/services/api.service.ts", "pattern": "/^  private handleHttpError(err: HttpErrorResponse, friendlyMessage: string) {$/", "language": "TypeScript", "kind": "method", "scope": "ApiService", "scopeKind": "class"}, {"_type": "tag", "name": "http", "path": "/home/kavia/workspace/code-generation/q-a-chat-assistant-3046-3055/frontend_app/src/app/services/api.service.ts", "pattern": "/^  constructor(private http: HttpClient) {}$/", "language": "TypeScript", "kind": "property", "scope": "ApiService", "scopeKind": "class"}, {"_type": "tag", "name": "message", "path": "/home/kavia/workspace/code-generation/q-a-chat-assistant-3046-3055/frontend_app/src/app/services/api.service.ts", "pattern": "/^    const message = err?.error?.message || err?.statusText || friendlyMessage;$/", "language": "TypeScript", "kind": "constant", "scope": "ApiService.handleHttpError", "scopeKind": "method"}, {"_type": "tag", "name": "params", "path": "/home/kavia/workspace/code-generation/q-a-chat-assistant-3046-3055/frontend_app/src/app/services/api.service.ts", "pattern": "/^    const params = query ? new HttpParams().set('query', query) : undefined;$/", "language": "TypeScript", "kind": "constant", "scope": "ApiService.getQuestions", "scopeKind": "method"}], "hash": "8f632e961da35183188c22ad96e73117", "format-version": 4, "code-base-name": "frontend_app", "filename": "frontend_app/src/app/services/api.service.ts", "fields": [{"name": "private readonly base = '\\/api';", "scope": "ApiService", "scopeKind": "class", "description": "unavailable"}, {"name": "constructor(private http: HttpClient) {}", "scope": "ApiService", "scopeKind": "class", "description": "unavailable"}]}