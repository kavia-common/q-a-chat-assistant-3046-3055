{"is_source_file": true, "format": "TypeScript", "description": "This file defines an Angular service, ApiService, which provides methods to interact with backend APIs related to questions, answers, and asking an LLM. It currently uses mock data with observables and delay for testing purposes.", "external_files": ["../models/qa.models", "@angular/core", "@angular/common/http", "rxjs"], "external_methods": ["of", "delay", "map"], "published": ["ApiService"], "classes": [{"name": "ApiService", "description": "Angular injectable service acting as a fa\u00e7ade for backend API calls related to questions, answers, and LLM interactions."}], "methods": [{"name": "getQuestions(query = ''): Observable<Question[]> { getQuestions", "description": "Returns an observable emitting a filtered list of questions based on the query.", "scope": "ApiService", "scopeKind": "class"}, {"name": "addQuestion(payload: { title: string; body: string; tags: string[] }): Observable<Question> { addQuestion", "description": "Creates and returns a mock new question object.", "scope": "ApiService", "scopeKind": "class"}, {"name": "getAnswers(questionId: string): Observable<Answer[]> { getAnswers", "description": "Returns an observable emitting answers for a specified question ID.", "scope": "ApiService", "scopeKind": "class"}, {"name": "addAnswer(questionId: string, payload: { body: string }): Observable<Answer> { addAnswer", "description": "Creates and returns a mock answer for a specified question ID.", "scope": "ApiService", "scopeKind": "class"}, {"name": "askLLM(payload: { prompt: string; context?: any }): Observable<{ answer: string }> { askLLM", "description": "Simulates a call to a language model API, returning a canned answer.", "scope": "ApiService", "scopeKind": "class"}, {"name": "constructor(private http: HttpClient) {} constructor", "scope": "ApiService", "scopeKind": "class", "description": "unavailable"}], "calls": ["of", "delay", "this.http.post"], "search-terms": ["Angular", "ApiService", "HTTP calls", "mock data", "questions", "answers", "LLM interaction", "qa.models"], "state": 2, "file_id": 22, "knowledge_revision": 49, "git_revision": "", "ctags": [{"_type": "tag", "name": "ApiService", "path": "/home/kavia/workspace/code-generation/q-a-chat-assistant-3046-3055/frontend_app/src/app/services/api.service.ts", "pattern": "/^export class ApiService {$/", "language": "TypeScript", "kind": "class"}, {"_type": "tag", "name": "MOCK_LATENCY", "path": "/home/kavia/workspace/code-generation/q-a-chat-assistant-3046-3055/frontend_app/src/app/services/api.service.ts", "pattern": "/^const MOCK_LATENCY = 250;$/", "language": "TypeScript", "kind": "constant"}, {"_type": "tag", "name": "a", "path": "/home/kavia/workspace/code-generation/q-a-chat-assistant-3046-3055/frontend_app/src/app/services/api.service.ts", "pattern": "/^    const a: Answer = {$/", "language": "TypeScript", "kind": "constant", "scope": "ApiService.addAnswer", "scopeKind": "method"}, {"_type": "tag", "name": "addAnswer", "path": "/home/kavia/workspace/code-generation/q-a-chat-assistant-3046-3055/frontend_app/src/app/services/api.service.ts", "pattern": "/^  addAnswer(questionId: string, payload: { body: string }): Observable<Answer> {$/", "language": "TypeScript", "kind": "method", "scope": "ApiService", "scopeKind": "class"}, {"_type": "tag", "name": "addQuestion", "path": "/home/kavia/workspace/code-generation/q-a-chat-assistant-3046-3055/frontend_app/src/app/services/api.service.ts", "pattern": "/^  addQuestion(payload: { title: string; body: string; tags: string[] }): Observable<Question> {$/", "language": "TypeScript", "kind": "method", "scope": "ApiService", "scopeKind": "class"}, {"_type": "tag", "name": "answerCount", "path": "/home/kavia/workspace/code-generation/q-a-chat-assistant-3046-3055/frontend_app/src/app/services/api.service.ts", "pattern": "/^        answerCount: 1,$/", "language": "TypeScript", "kind": "constant", "scope": "ApiService.getQuestions", "scopeKind": "method"}, {"_type": "tag", "name": "answerCount", "path": "/home/kavia/workspace/code-generation/q-a-chat-assistant-3046-3055/frontend_app/src/app/services/api.service.ts", "pattern": "/^        answerCount: 2,$/", "language": "TypeScript", "kind": "constant", "scope": "ApiService.getQuestions", "scopeKind": "method"}, {"_type": "tag", "name": "askLLM", "path": "/home/kavia/workspace/code-generation/q-a-chat-assistant-3046-3055/frontend_app/src/app/services/api.service.ts", "pattern": "/^  askLLM(payload: { prompt: string; context?: any }): Observable<{ answer: string }> {$/", "language": "TypeScript", "kind": "method", "scope": "ApiService", "scopeKind": "class"}, {"_type": "tag", "name": "body", "path": "/home/kavia/workspace/code-generation/q-a-chat-assistant-3046-3055/frontend_app/src/app/services/api.service.ts", "pattern": "/^        body: 'Use standalone: true and provideIn root or provide in component providers as need/", "language": "TypeScript", "kind": "constant", "scope": "ApiService.getAnswers", "scopeKind": "method"}, {"_type": "tag", "name": "body", "path": "/home/kavia/workspace/code-generation/q-a-chat-assistant-3046-3055/frontend_app/src/app/services/api.service.ts", "pattern": "/^      body: payload.body,$/", "language": "TypeScript", "kind": "constant", "scope": "ApiService.addAnswer", "scopeKind": "method"}, {"_type": "tag", "name": "body", "path": "/home/kavia/workspace/code-generation/q-a-chat-assistant-3046-3055/frontend_app/src/app/services/api.service.ts", "pattern": "/^      body: payload.body,$/", "language": "TypeScript", "kind": "constant", "scope": "ApiService.addQuestion", "scopeKind": "method"}, {"_type": "tag", "name": "canned", "path": "/home/kavia/workspace/code-generation/q-a-chat-assistant-3046-3055/frontend_app/src/app/services/api.service.ts", "pattern": "/^    const canned = `Here's a concise explanation:\\\\n- Angular standalone components are declared/", "language": "TypeScript", "kind": "constant", "scope": "ApiService.askLLM", "scopeKind": "method"}, {"_type": "tag", "name": "constructor", "path": "/home/kavia/workspace/code-generation/q-a-chat-assistant-3046-3055/frontend_app/src/app/services/api.service.ts", "pattern": "/^  constructor(private http: HttpClient) {}$/", "language": "TypeScript", "kind": "method", "scope": "ApiService", "scopeKind": "class"}, {"_type": "tag", "name": "createdAt", "path": "/home/kavia/workspace/code-generation/q-a-chat-assistant-3046-3055/frontend_app/src/app/services/api.service.ts", "pattern": "/^      createdAt: new Date().toISOString(),$/", "language": "TypeScript", "kind": "constant", "scope": "ApiService.addAnswer", "scopeKind": "method"}, {"_type": "tag", "name": "createdAt", "path": "/home/kavia/workspace/code-generation/q-a-chat-assistant-3046-3055/frontend_app/src/app/services/api.service.ts", "pattern": "/^      createdAt: new Date().toISOString(),$/", "language": "TypeScript", "kind": "constant", "scope": "ApiService.addQuestion", "scopeKind": "method"}, {"_type": "tag", "name": "filtered", "path": "/home/kavia/workspace/code-generation/q-a-chat-assistant-3046-3055/frontend_app/src/app/services/api.service.ts", "pattern": "/^    const filtered = query$/", "language": "TypeScript", "kind": "constant", "scope": "ApiService.getQuestions", "scopeKind": "method"}, {"_type": "tag", "name": "getAnswers", "path": "/home/kavia/workspace/code-generation/q-a-chat-assistant-3046-3055/frontend_app/src/app/services/api.service.ts", "pattern": "/^  getAnswers(questionId: string): Observable<Answer[]> {$/", "language": "TypeScript", "kind": "method", "scope": "ApiService", "scopeKind": "class"}, {"_type": "tag", "name": "getQuestions", "path": "/home/kavia/workspace/code-generation/q-a-chat-assistant-3046-3055/frontend_app/src/app/services/api.service.ts", "pattern": "/^  getQuestions(query = ''): Observable<Question[]> {$/", "language": "TypeScript", "kind": "method", "scope": "ApiService", "scopeKind": "class"}, {"_type": "tag", "name": "http", "path": "/home/kavia/workspace/code-generation/q-a-chat-assistant-3046-3055/frontend_app/src/app/services/api.service.ts", "pattern": "/^  constructor(private http: HttpClient) {}$/", "language": "TypeScript", "kind": "property", "scope": "ApiService", "scopeKind": "class"}, {"_type": "tag", "name": "mock", "path": "/home/kavia/workspace/code-generation/q-a-chat-assistant-3046-3055/frontend_app/src/app/services/api.service.ts", "pattern": "/^    const mock: Answer[] = [$/", "language": "TypeScript", "kind": "constant", "scope": "ApiService.getAnswers", "scopeKind": "method"}, {"_type": "tag", "name": "mock", "path": "/home/kavia/workspace/code-generation/q-a-chat-assistant-3046-3055/frontend_app/src/app/services/api.service.ts", "pattern": "/^    const mock: Question[] = [$/", "language": "TypeScript", "kind": "constant", "scope": "ApiService.getQuestions", "scopeKind": "method"}, {"_type": "tag", "name": "now", "path": "/home/kavia/workspace/code-generation/q-a-chat-assistant-3046-3055/frontend_app/src/app/services/api.service.ts", "pattern": "/^    const now = new Date().toISOString();$/", "language": "TypeScript", "kind": "constant", "scope": "ApiService.getAnswers", "scopeKind": "method"}, {"_type": "tag", "name": "now", "path": "/home/kavia/workspace/code-generation/q-a-chat-assistant-3046-3055/frontend_app/src/app/services/api.service.ts", "pattern": "/^    const now = new Date().toISOString();$/", "language": "TypeScript", "kind": "constant", "scope": "ApiService.getQuestions", "scopeKind": "method"}, {"_type": "tag", "name": "q", "path": "/home/kavia/workspace/code-generation/q-a-chat-assistant-3046-3055/frontend_app/src/app/services/api.service.ts", "pattern": "/^    const q: Question = {$/", "language": "TypeScript", "kind": "constant", "scope": "ApiService.addQuestion", "scopeKind": "method"}, {"_type": "tag", "name": "tags", "path": "/home/kavia/workspace/code-generation/q-a-chat-assistant-3046-3055/frontend_app/src/app/services/api.service.ts", "pattern": "/^      tags: payload.tags,$/", "language": "TypeScript", "kind": "constant", "scope": "ApiService.addQuestion", "scopeKind": "method"}, {"_type": "tag", "name": "upvotes", "path": "/home/kavia/workspace/code-generation/q-a-chat-assistant-3046-3055/frontend_app/src/app/services/api.service.ts", "pattern": "/^        upvotes: 4,$/", "language": "TypeScript", "kind": "constant", "scope": "ApiService.getAnswers", "scopeKind": "method"}], "hash": "c6d7b14b5ffd88918389da78a959c18d", "format-version": 4, "code-base-name": "frontend_app", "filename": "frontend_app/src/app/services/api.service.ts", "fields": [{"name": "constructor(private http: HttpClient) {}", "scope": "ApiService", "scopeKind": "class", "description": "unavailable"}], "revision_history": [{"49": ""}]}